---
import { getCollection } from "astro:content";
import BaseHead from "@/components/astro/layout/BaseHead.astro";
import BaseHeader from "@/components/astro/layout/BaseHeader.astro";
import ProductBreadcrumbs from "@/components/astro/layout/ProductBreadcrumbs.astro";
import Footer from "@/components/astro/layout/Footer.astro";
import { Header } from "@/components/react/layout";
import { ProductListingPage } from "@/components/react/pages";
import type {
  ProductData,
  Product,
} from "@/components/react/pages/ProductListingPage";
import { getResolvedImageSource } from "@/utils/images";

// Get all products from both directory structures
const products = await getCollection("products");

// Map collection data to match Product interface and resolve images
const mappedProducts = await Promise.all(
  products.map(async (product) => {
    // Resolve the image path server-side using the single utility function
    const resolvedImageSrc = await getResolvedImageSource(
      product.data.heroImage,
    );

    const productData: ProductData = {
      title: product.data.title,
      description: product.data.description,
      heroImage: resolvedImageSrc,
      category: product.data.category,
      pubDate: product.data.pubDate.toISOString(),
      tableType: product.data.tableType,
      construction: product.data.construction
        ? {
            sizeRange: Array.isArray(product.data.construction.sizeRange)
              ? product.data.construction.sizeRange.join(", ")
              : product.data.construction.sizeRange,
            conductor: product.data.construction.conductor,
            insulation: product.data.construction.insulation,
            rating: product.data.construction.rating,
          }
        : undefined,
      applications: product.data.applications,
      compliances: product.data.compliances,
      systemApprovals: product.data.systemApprovals,
      tensileStrength: product.data.tensileStrength,
      breakdown: product.data.breakdown,
      overview: product.data.overview,
      tags: product.data.tags || {},
    };

    return {
      id: product.id,
      slug: product.slug,
      collection: "products" as const,
      data: productData,
    };
  }),
);

// Sort products by date
const sortedProducts = mappedProducts.sort(
  (a, b) =>
    new Date(b.data.pubDate).valueOf() - new Date(a.data.pubDate).valueOf(),
);

// Get unique categories
const categories = [
  ...new Set(mappedProducts.map((post) => post.data.category)),
];

// Get URL parameters for filters
const url = new URL(Astro.request.url);
const searchParams = url.searchParams;

// Parse filter parameters
const typeFilters = searchParams.getAll("type");
const materialFilters = searchParams.getAll("material");
const searchQuery = searchParams.get("q") || "";

// Build filter state object
const filterState = {
  type: typeFilters,
  material: materialFilters,
  search: searchQuery,
};

const title = "Product Catalog";
const description =
  "Browse our complete catalog of high-quality wire and cable products.";
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={title} description={description} />
  </head>
  <body class="min-h-screen bg-background">
    <Header client:load />
    <BaseHeader eyebrow="Product" title="Catalog" />
    <!-- <ProductBreadcrumbs segments={segments} /> -->
    <main>
      <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-4 sm:py-6 md:py-8">
        <ProductListingPage
          client:load
          products={sortedProducts}
          categories={categories}
          initialFilters={filterState}
        />
      </div>
    </main>
    <Footer />
  </body>
</html>
